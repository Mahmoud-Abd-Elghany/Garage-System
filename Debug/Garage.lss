
Garage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  000008ce  00000962  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800096  00800096  00000998  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001354  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000954  00000000  00000000  00001ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c15  00000000  00000000  000027fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  00003414  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000685  00000000  00000000  0000369c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bb3  00000000  00000000  00003d21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000048d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 9c 02 	jmp	0x538	; 0x538 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ec       	ldi	r30, 0xCE	; 206
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 39       	cpi	r26, 0x96	; 150
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e9       	ldi	r26, 0x96	; 150
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 39       	cpi	r26, 0x9B	; 155
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c8 01 	call	0x390	; 0x390 <main>
  8a:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetPINDir>:
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
  92:	82 34       	cpi	r24, 0x42	; 66
  94:	19 f1       	breq	.+70     	; 0xdc <DIO_vsetPINDir+0x4a>
  96:	18 f4       	brcc	.+6      	; 0x9e <DIO_vsetPINDir+0xc>
  98:	81 34       	cpi	r24, 0x41	; 65
  9a:	39 f0       	breq	.+14     	; 0xaa <DIO_vsetPINDir+0x18>
  9c:	08 95       	ret
  9e:	83 34       	cpi	r24, 0x43	; 67
  a0:	b1 f1       	breq	.+108    	; 0x10e <DIO_vsetPINDir+0x7c>
  a2:	84 34       	cpi	r24, 0x44	; 68
  a4:	09 f4       	brne	.+2      	; 0xa8 <DIO_vsetPINDir+0x16>
  a6:	4c c0       	rjmp	.+152    	; 0x140 <DIO_vsetPINDir+0xae>
  a8:	08 95       	ret
  aa:	41 30       	cpi	r20, 0x01	; 1
  ac:	59 f4       	brne	.+22     	; 0xc4 <DIO_vsetPINDir+0x32>
  ae:	2a b3       	in	r18, 0x1a	; 26
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_vsetPINDir+0x28>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_vsetPINDir+0x24>
  be:	82 2b       	or	r24, r18
  c0:	8a bb       	out	0x1a, r24	; 26
  c2:	08 95       	ret
  c4:	2a b3       	in	r18, 0x1a	; 26
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_vsetPINDir+0x3e>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_vsetPINDir+0x3a>
  d4:	80 95       	com	r24
  d6:	82 23       	and	r24, r18
  d8:	8a bb       	out	0x1a, r24	; 26
  da:	08 95       	ret
  dc:	41 30       	cpi	r20, 0x01	; 1
  de:	59 f4       	brne	.+22     	; 0xf6 <DIO_vsetPINDir+0x64>
  e0:	27 b3       	in	r18, 0x17	; 23
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <DIO_vsetPINDir+0x5a>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <DIO_vsetPINDir+0x56>
  f0:	82 2b       	or	r24, r18
  f2:	87 bb       	out	0x17, r24	; 23
  f4:	08 95       	ret
  f6:	27 b3       	in	r18, 0x17	; 23
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_vsetPINDir+0x70>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_vsetPINDir+0x6c>
 106:	80 95       	com	r24
 108:	82 23       	and	r24, r18
 10a:	87 bb       	out	0x17, r24	; 23
 10c:	08 95       	ret
 10e:	41 30       	cpi	r20, 0x01	; 1
 110:	59 f4       	brne	.+22     	; 0x128 <DIO_vsetPINDir+0x96>
 112:	24 b3       	in	r18, 0x14	; 20
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_vsetPINDir+0x8c>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_vsetPINDir+0x88>
 122:	82 2b       	or	r24, r18
 124:	84 bb       	out	0x14, r24	; 20
 126:	08 95       	ret
 128:	24 b3       	in	r18, 0x14	; 20
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_vsetPINDir+0xa2>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_vsetPINDir+0x9e>
 138:	80 95       	com	r24
 13a:	82 23       	and	r24, r18
 13c:	84 bb       	out	0x14, r24	; 20
 13e:	08 95       	ret
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	59 f4       	brne	.+22     	; 0x15a <DIO_vsetPINDir+0xc8>
 144:	21 b3       	in	r18, 0x11	; 17
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_vsetPINDir+0xbe>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_vsetPINDir+0xba>
 154:	82 2b       	or	r24, r18
 156:	81 bb       	out	0x11, r24	; 17
 158:	08 95       	ret
 15a:	21 b3       	in	r18, 0x11	; 17
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_vsetPINDir+0xd4>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_vsetPINDir+0xd0>
 16a:	80 95       	com	r24
 16c:	82 23       	and	r24, r18
 16e:	81 bb       	out	0x11, r24	; 17
 170:	08 95       	ret

00000172 <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
 172:	82 34       	cpi	r24, 0x42	; 66
 174:	e9 f0       	breq	.+58     	; 0x1b0 <DIO_u8read+0x3e>
 176:	18 f4       	brcc	.+6      	; 0x17e <DIO_u8read+0xc>
 178:	81 34       	cpi	r24, 0x41	; 65
 17a:	31 f0       	breq	.+12     	; 0x188 <DIO_u8read+0x16>
 17c:	55 c0       	rjmp	.+170    	; 0x228 <DIO_u8read+0xb6>
 17e:	83 34       	cpi	r24, 0x43	; 67
 180:	59 f1       	breq	.+86     	; 0x1d8 <DIO_u8read+0x66>
 182:	84 34       	cpi	r24, 0x44	; 68
 184:	e9 f1       	breq	.+122    	; 0x200 <DIO_u8read+0x8e>
 186:	50 c0       	rjmp	.+160    	; 0x228 <DIO_u8read+0xb6>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
 188:	49 b3       	in	r20, 0x19	; 25
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	9c 01       	movw	r18, r24
 190:	06 2e       	mov	r0, r22
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_u8read+0x26>
 194:	22 0f       	add	r18, r18
 196:	33 1f       	adc	r19, r19
 198:	0a 94       	dec	r0
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_u8read+0x22>
 19c:	84 2f       	mov	r24, r20
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	82 23       	and	r24, r18
 1a2:	93 23       	and	r25, r19
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <DIO_u8read+0x38>
 1a6:	95 95       	asr	r25
 1a8:	87 95       	ror	r24
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <DIO_u8read+0x34>
		break;
 1ae:	08 95       	ret
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
 1b0:	46 b3       	in	r20, 0x16	; 22
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	9c 01       	movw	r18, r24
 1b8:	06 2e       	mov	r0, r22
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <DIO_u8read+0x4e>
 1bc:	22 0f       	add	r18, r18
 1be:	33 1f       	adc	r19, r19
 1c0:	0a 94       	dec	r0
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <DIO_u8read+0x4a>
 1c4:	84 2f       	mov	r24, r20
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	82 23       	and	r24, r18
 1ca:	93 23       	and	r25, r19
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_u8read+0x60>
 1ce:	95 95       	asr	r25
 1d0:	87 95       	ror	r24
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_u8read+0x5c>
		break;
 1d6:	08 95       	ret
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
 1d8:	43 b3       	in	r20, 0x13	; 19
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	9c 01       	movw	r18, r24
 1e0:	06 2e       	mov	r0, r22
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_u8read+0x76>
 1e4:	22 0f       	add	r18, r18
 1e6:	33 1f       	adc	r19, r19
 1e8:	0a 94       	dec	r0
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_u8read+0x72>
 1ec:	84 2f       	mov	r24, r20
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	82 23       	and	r24, r18
 1f2:	93 23       	and	r25, r19
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_u8read+0x88>
 1f6:	95 95       	asr	r25
 1f8:	87 95       	ror	r24
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_u8read+0x84>
		break;
 1fe:	08 95       	ret
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
 200:	40 b3       	in	r20, 0x10	; 16
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	9c 01       	movw	r18, r24
 208:	06 2e       	mov	r0, r22
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_u8read+0x9e>
 20c:	22 0f       	add	r18, r18
 20e:	33 1f       	adc	r19, r19
 210:	0a 94       	dec	r0
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_u8read+0x9a>
 214:	84 2f       	mov	r24, r20
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	82 23       	and	r24, r18
 21a:	93 23       	and	r25, r19
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_u8read+0xb0>
 21e:	95 95       	asr	r25
 220:	87 95       	ror	r24
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_u8read+0xac>
		break;
 226:	08 95       	ret
}


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
 228:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default: 
		break;
	}
	return return_value ;
}
 22a:	08 95       	ret

0000022c <LCD_Send_Command>:
	
	_delay_ms(2);
}

void LCD_Send_Command(unsigned char cmd){
	LCD_PORT_OUT &= (~(1<<RS_PIN));
 22c:	9b b3       	in	r25, 0x1b	; 27
 22e:	9f 7b       	andi	r25, 0xBF	; 191
 230:	9b bb       	out	0x1b, r25	; 27
	LCD_PORT_OUT &= (~(1<<R_W_PIN));
 232:	9b b3       	in	r25, 0x1b	; 27
 234:	9f 7d       	andi	r25, 0xDF	; 223
 236:	9b bb       	out	0x1b, r25	; 27
	LCD_PORT_OUT &= (~(1<<ENABLE_PIN));
 238:	9b b3       	in	r25, 0x1b	; 27
 23a:	9f 7e       	andi	r25, 0xEF	; 239
 23c:	9b bb       	out	0x1b, r25	; 27
	LCD_PORT_OUT = (LCD_PORT_OUT & 0x0F) | (cmd << 4);
	LCD_PORT_OUT |= (1<<ENABLE_PIN);
	_delay_us(2);
	LCD_PORT_OUT &= (~(1<<ENABLE_PIN));
	#else
	LCD_PORT_OUT = (LCD_PORT_OUT & 0xF0) | (cmd >> 4);
 23e:	9b b3       	in	r25, 0x1b	; 27
 240:	90 7f       	andi	r25, 0xF0	; 240
 242:	28 2f       	mov	r18, r24
 244:	22 95       	swap	r18
 246:	2f 70       	andi	r18, 0x0F	; 15
 248:	92 2b       	or	r25, r18
 24a:	9b bb       	out	0x1b, r25	; 27
	LCD_PORT_OUT |= (1<<ENABLE_PIN);
 24c:	9b b3       	in	r25, 0x1b	; 27
 24e:	90 61       	ori	r25, 0x10	; 16
 250:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 252:	e9 ef       	ldi	r30, 0xF9	; 249
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	31 97       	sbiw	r30, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <LCD_Send_Command+0x2a>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <LCD_Send_Command+0x30>
 25c:	00 00       	nop
	_delay_ms(1);
	LCD_PORT_OUT &= (~(1<<ENABLE_PIN));
 25e:	9b b3       	in	r25, 0x1b	; 27
 260:	9f 7e       	andi	r25, 0xEF	; 239
 262:	9b bb       	out	0x1b, r25	; 27
 264:	e9 ef       	ldi	r30, 0xF9	; 249
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	31 97       	sbiw	r30, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <LCD_Send_Command+0x3c>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <LCD_Send_Command+0x42>
 26e:	00 00       	nop
	_delay_ms(1);
	LCD_PORT_OUT = (LCD_PORT_OUT & 0xF0) | (cmd & 0x0F);
 270:	9b b3       	in	r25, 0x1b	; 27
 272:	90 7f       	andi	r25, 0xF0	; 240
 274:	8f 70       	andi	r24, 0x0F	; 15
 276:	89 2b       	or	r24, r25
 278:	8b bb       	out	0x1b, r24	; 27
	LCD_PORT_OUT |= (1<<ENABLE_PIN);
 27a:	8b b3       	in	r24, 0x1b	; 27
 27c:	80 61       	ori	r24, 0x10	; 16
 27e:	8b bb       	out	0x1b, r24	; 27
 280:	89 ef       	ldi	r24, 0xF9	; 249
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <LCD_Send_Command+0x58>
 288:	00 c0       	rjmp	.+0      	; 0x28a <LCD_Send_Command+0x5e>
 28a:	00 00       	nop
	_delay_ms(1);
	LCD_PORT_OUT &= (~(1<<ENABLE_PIN));
 28c:	8b b3       	in	r24, 0x1b	; 27
 28e:	8f 7e       	andi	r24, 0xEF	; 239
 290:	8b bb       	out	0x1b, r24	; 27
	
	LCD_PORT_OUT &= 0xF0;
 292:	8b b3       	in	r24, 0x1b	; 27
 294:	80 7f       	andi	r24, 0xF0	; 240
 296:	8b bb       	out	0x1b, r24	; 27
 298:	e3 ef       	ldi	r30, 0xF3	; 243
 29a:	f1 e0       	ldi	r31, 0x01	; 1
 29c:	31 97       	sbiw	r30, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <LCD_Send_Command+0x70>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <LCD_Send_Command+0x76>
 2a2:	00 00       	nop
 2a4:	08 95       	ret

000002a6 <LCD_init>:
 */ 

#include "LCD.h"

void LCD_init(){
	LCD_PORT_DIR |= (1<<RS_PIN) | (1<<ENABLE_PIN) | (1<<R_W_PIN); //Setting Enable, R/W and Register Select pins to output
 2a6:	8a b3       	in	r24, 0x1a	; 26
 2a8:	80 67       	ori	r24, 0x70	; 112
 2aa:	8a bb       	out	0x1a, r24	; 26
	#if (LCD_PORT_UPPER_LOWER == UPPER)
	LCD_PORT_DIR |= (0xF0); // changing upper 4 pins to output pins
	#else
	LCD_PORT_DIR |= (0x0F); // changing lower 4 pins to output pins
 2ac:	8a b3       	in	r24, 0x1a	; 26
 2ae:	8f 60       	ori	r24, 0x0F	; 15
 2b0:	8a bb       	out	0x1a, r24	; 26
	#endif
 	LCD_Send_Command(LCD_4BIT_MODE); // Initialize 4-bit mode
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_Send_Command>
 	LCD_Send_Command(LCD_4BIT_2LINES_MODE); //Initialize 16x2 mode
 2b8:	88 e2       	ldi	r24, 0x28	; 40
 2ba:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_Send_Command>
 	LCD_Send_Command(LCD_DISPLAY_ON_CURSOR_BLINK);
 2be:	8f e0       	ldi	r24, 0x0F	; 15
 2c0:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_Send_Command>
	LCD_Send_Command(LCD_CLEAR_SCREEN); //Clearing screen
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_Send_Command>
 2ca:	83 ef       	ldi	r24, 0xF3	; 243
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <LCD_init+0x28>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <LCD_init+0x2e>
 2d4:	00 00       	nop
 2d6:	08 95       	ret

000002d8 <LCD_Display_Character>:
	#endif
	_delay_ms(2);
}

void LCD_Display_Character(unsigned char Char){
	if((Char >=0) && (Char<=9)){
 2d8:	8a 30       	cpi	r24, 0x0A	; 10
 2da:	08 f4       	brcc	.+2      	; 0x2de <LCD_Display_Character+0x6>
		Char = Char + '0';
 2dc:	80 5d       	subi	r24, 0xD0	; 208
	}
	
	LCD_PORT_OUT &= (~(1<<R_W_PIN));
 2de:	9b b3       	in	r25, 0x1b	; 27
 2e0:	9f 7d       	andi	r25, 0xDF	; 223
 2e2:	9b bb       	out	0x1b, r25	; 27
	LCD_PORT_OUT |= (1<<RS_PIN);
 2e4:	9b b3       	in	r25, 0x1b	; 27
 2e6:	90 64       	ori	r25, 0x40	; 64
 2e8:	9b bb       	out	0x1b, r25	; 27
	LCD_PORT_OUT = (LCD_PORT_OUT & 0x0F) | (Char << 4);
	LCD_PORT_OUT |= (1<<ENABLE_PIN);
	_delay_ms(1);
	LCD_PORT_OUT &= (~(1<<ENABLE_PIN));
	#else
	LCD_PORT_OUT = (LCD_PORT_OUT & 0xF0) | (Char >> 4);
 2ea:	9b b3       	in	r25, 0x1b	; 27
 2ec:	90 7f       	andi	r25, 0xF0	; 240
 2ee:	28 2f       	mov	r18, r24
 2f0:	22 95       	swap	r18
 2f2:	2f 70       	andi	r18, 0x0F	; 15
 2f4:	92 2b       	or	r25, r18
 2f6:	9b bb       	out	0x1b, r25	; 27
	LCD_PORT_OUT |= (1<<ENABLE_PIN);
 2f8:	9b b3       	in	r25, 0x1b	; 27
 2fa:	90 61       	ori	r25, 0x10	; 16
 2fc:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fe:	00 00       	nop
	_delay_us(1);
	LCD_PORT_OUT &= (~(1<<ENABLE_PIN));
 300:	9b b3       	in	r25, 0x1b	; 27
 302:	9f 7e       	andi	r25, 0xEF	; 239
 304:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 306:	e3 ef       	ldi	r30, 0xF3	; 243
 308:	f1 e0       	ldi	r31, 0x01	; 1
 30a:	31 97       	sbiw	r30, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <LCD_Display_Character+0x32>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <LCD_Display_Character+0x38>
 310:	00 00       	nop
	_delay_ms(2);
	LCD_PORT_OUT = (LCD_PORT_OUT & 0xF0) | (Char & 0x0F);
 312:	9b b3       	in	r25, 0x1b	; 27
 314:	90 7f       	andi	r25, 0xF0	; 240
 316:	8f 70       	andi	r24, 0x0F	; 15
 318:	89 2b       	or	r24, r25
 31a:	8b bb       	out	0x1b, r24	; 27
	LCD_PORT_OUT |= (1<<ENABLE_PIN);
 31c:	8b b3       	in	r24, 0x1b	; 27
 31e:	80 61       	ori	r24, 0x10	; 16
 320:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 322:	00 00       	nop
	_delay_us(1);
	LCD_PORT_OUT &= (~(1<<ENABLE_PIN));
 324:	8b b3       	in	r24, 0x1b	; 27
 326:	8f 7e       	andi	r24, 0xEF	; 239
 328:	8b bb       	out	0x1b, r24	; 27
	
	LCD_PORT_OUT &= 0xF0;
 32a:	8b b3       	in	r24, 0x1b	; 27
 32c:	80 7f       	andi	r24, 0xF0	; 240
 32e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 330:	83 ef       	ldi	r24, 0xF3	; 243
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <LCD_Display_Character+0x5c>
 338:	00 c0       	rjmp	.+0      	; 0x33a <LCD_Display_Character+0x62>
 33a:	00 00       	nop
 33c:	08 95       	ret

0000033e <LCD_Display_String>:
	_delay_ms(2);
}



void LCD_Display_String(unsigned char *str){
 33e:	ef 92       	push	r14
 340:	ff 92       	push	r15
 342:	0f 93       	push	r16
 344:	1f 93       	push	r17
 346:	cf 93       	push	r28
 348:	7c 01       	movw	r14, r24
	signed char i = 0;
 34a:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i] != '\0'){
 34c:	0a c0       	rjmp	.+20     	; 0x362 <LCD_Display_String+0x24>
		if(i == 16){
 34e:	c0 31       	cpi	r28, 0x10	; 16
 350:	19 f4       	brne	.+6      	; 0x358 <LCD_Display_String+0x1a>
			LCD_Send_Command(LCD_GOTO_2ND_ROW);
 352:	80 ec       	ldi	r24, 0xC0	; 192
 354:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_Send_Command>
		}
		LCD_Display_Character(str[i]);
 358:	f8 01       	movw	r30, r16
 35a:	80 81       	ld	r24, Z
 35c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_Display_Character>
		i++;
 360:	cf 5f       	subi	r28, 0xFF	; 255



void LCD_Display_String(unsigned char *str){
	signed char i = 0;
	while(str[i] != '\0'){
 362:	87 01       	movw	r16, r14
 364:	0c 0f       	add	r16, r28
 366:	11 1d       	adc	r17, r1
 368:	c7 fd       	sbrc	r28, 7
 36a:	1a 95       	dec	r17
 36c:	f8 01       	movw	r30, r16
 36e:	80 81       	ld	r24, Z
 370:	81 11       	cpse	r24, r1
 372:	ed cf       	rjmp	.-38     	; 0x34e <LCD_Display_String+0x10>
			LCD_Send_Command(LCD_GOTO_2ND_ROW);
		}
		LCD_Display_Character(str[i]);
		i++;
	}
 374:	cf 91       	pop	r28
 376:	1f 91       	pop	r17
 378:	0f 91       	pop	r16
 37a:	ff 90       	pop	r15
 37c:	ef 90       	pop	r14
 37e:	08 95       	ret

00000380 <timeout_entry_callback>:
    }
}


void timeout_entry_callback(void){
	servo_rotate_0(ENTRY_SERVO_CHANNEL);
 380:	82 e4       	ldi	r24, 0x42	; 66
 382:	0e 94 76 02 	call	0x4ec	; 0x4ec <servo_rotate_0>
 386:	08 95       	ret

00000388 <timeout_exit_callback>:
}

void timeout_exit_callback(void){
	servo_rotate_0(EXIT_SERVO_CHANNEL);
 388:	81 e4       	ldi	r24, 0x41	; 65
 38a:	0e 94 76 02 	call	0x4ec	; 0x4ec <servo_rotate_0>
 38e:	08 95       	ret

00000390 <main>:

#include "main.h"


int main(void)
{
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	00 d0       	rcall	.+0      	; 0x396 <main+0x6>
 396:	00 d0       	rcall	.+0      	; 0x398 <main+0x8>
 398:	00 d0       	rcall	.+0      	; 0x39a <main+0xa>
 39a:	cd b7       	in	r28, 0x3d	; 61
 39c:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
 39e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_init>
	
	/* Entry and Entry Check, Entry PIR Pins */
	DIO_vsetPINDir(PIR_PORT,ENTRY_PIR_PIN, INPUT);
 3a2:	40 e0       	ldi	r20, 0x00	; 0
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	84 e4       	ldi	r24, 0x44	; 68
 3a8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(PIR_PORT,ENTRY_PIR_CHECK_PIN, INPUT);
 3ac:	40 e0       	ldi	r20, 0x00	; 0
 3ae:	61 e0       	ldi	r22, 0x01	; 1
 3b0:	84 e4       	ldi	r24, 0x44	; 68
 3b2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	
	/* Exit and Exit Check, Exit PIR Pins */
	DIO_vsetPINDir(PIR_PORT,EXIT_PIR_PIN, INPUT);
 3b6:	40 e0       	ldi	r20, 0x00	; 0
 3b8:	62 e0       	ldi	r22, 0x02	; 2
 3ba:	84 e4       	ldi	r24, 0x44	; 68
 3bc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(PIR_PORT,EXIT_PIR_CHECK_PIN, INPUT);
 3c0:	40 e0       	ldi	r20, 0x00	; 0
 3c2:	63 e0       	ldi	r22, 0x03	; 3
 3c4:	84 e4       	ldi	r24, 0x44	; 68
 3c6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	
	garage_state garage_state = {0};
	garage_state.garage_total_slots = GARAGE_TOTAL_SLOTS;
	garage_state.garage_empty_slots = GARAGE_TOTAL_SLOTS;
 3ca:	83 e0       	ldi	r24, 0x03	; 3
 3cc:	8a 83       	std	Y+2, r24	; 0x02
	servo_rotate_0(ENTRY_SERVO_CHANNEL);
 3ce:	82 e4       	ldi	r24, 0x42	; 66
 3d0:	0e 94 76 02 	call	0x4ec	; 0x4ec <servo_rotate_0>
	servo_rotate_0(EXIT_SERVO_CHANNEL);
 3d4:	81 e4       	ldi	r24, 0x41	; 65
 3d6:	0e 94 76 02 	call	0x4ec	; 0x4ec <servo_rotate_0>
	LCD_Display_String(WELCOME_MSG);
 3da:	80 e6       	ldi	r24, 0x60	; 96
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_Display_String>
	uint_8 prev_entry_state_flag = 0;
	uint_8 prev_entry_check_state_flag = 0;
	
	/* Flags for Exit PIRs to to read the current state of the PIR once per car*/
	uint_8 prev_exit_state_flag = 0;
	uint_8 prev_exit_check_state_flag = 0;
 3e2:	b1 2c       	mov	r11, r1
	/* Flags for Entry PIRs to to read the current state of the PIR  one per car*/
	uint_8 prev_entry_state_flag = 0;
	uint_8 prev_entry_check_state_flag = 0;
	
	/* Flags for Exit PIRs to to read the current state of the PIR once per car*/
	uint_8 prev_exit_state_flag = 0;
 3e4:	a1 2c       	mov	r10, r1
	servo_rotate_0(EXIT_SERVO_CHANNEL);
	LCD_Display_String(WELCOME_MSG);
	
	/* Flags for Entry PIRs to to read the current state of the PIR  one per car*/
	uint_8 prev_entry_state_flag = 0;
	uint_8 prev_entry_check_state_flag = 0;
 3e6:	c1 2c       	mov	r12, r1
	servo_rotate_0(ENTRY_SERVO_CHANNEL);
	servo_rotate_0(EXIT_SERVO_CHANNEL);
	LCD_Display_String(WELCOME_MSG);
	
	/* Flags for Entry PIRs to to read the current state of the PIR  one per car*/
	uint_8 prev_entry_state_flag = 0;
 3e8:	d1 2c       	mov	r13, r1
 3ea:	04 c0       	rjmp	.+8      	; 0x3f4 <main+0x64>
		else if(garage_state.garage_exit[EXIT_PIR] == 0){
			prev_exit_state_flag = 0;
		}
		if(garage_state.garage_exit[EXIT_CHECK_PIR] == 1 && prev_exit_check_state_flag == 0){
			garage_state.garage_empty_slots = garage_state.garage_empty_slots +1;
			prev_exit_check_state_flag = 1;
 3ec:	bb 24       	eor	r11, r11
 3ee:	b3 94       	inc	r11
 3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <main+0x64>
			if(garage_state.garage_exit[EXIT_PIR] == 0){
				servo_rotate_0(EXIT_SERVO_CHANNEL);
			}
		}
		else if(garage_state.garage_exit[EXIT_CHECK_PIR] == 0){
			prev_exit_check_state_flag = 0;
 3f2:	b1 2c       	mov	r11, r1
	
	/* Flags for Exit PIRs to to read the current state of the PIR once per car*/
	uint_8 prev_exit_state_flag = 0;
	uint_8 prev_exit_check_state_flag = 0;
    while (1){
		garage_state.garage_entry[ENTRY_PIR] = DIO_u8read(PIR_PORT,ENTRY_PIR_PIN);
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	84 e4       	ldi	r24, 0x44	; 68
 3f8:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_u8read>
 3fc:	08 2f       	mov	r16, r24
		garage_state.garage_entry[ENTRY_CHECK_PIR] = DIO_u8read(PIR_PORT,ENTRY_PIR_CHECK_PIN);
 3fe:	61 e0       	ldi	r22, 0x01	; 1
 400:	84 e4       	ldi	r24, 0x44	; 68
 402:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_u8read>
 406:	e8 2e       	mov	r14, r24
		garage_state.garage_exit[EXIT_PIR] = DIO_u8read(PIR_PORT,EXIT_PIR_PIN);
 408:	62 e0       	ldi	r22, 0x02	; 2
 40a:	84 e4       	ldi	r24, 0x44	; 68
 40c:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_u8read>
 410:	18 2f       	mov	r17, r24
		garage_state.garage_exit[EXIT_CHECK_PIR] = DIO_u8read(PIR_PORT,EXIT_PIR_CHECK_PIN);
 412:	63 e0       	ldi	r22, 0x03	; 3
 414:	84 e4       	ldi	r24, 0x44	; 68
 416:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_u8read>
 41a:	f8 2e       	mov	r15, r24
		* 2- Check available slots
		* 3- Set timeout to close the gate if the car didn't enter or pass through second PIR
		* 4- Close the Gate when the car passes through second PIR or After predetermined duration.
		* 5- Decrement Empty slots
		*/
		if(garage_state.garage_entry[ENTRY_PIR] == 1 && prev_entry_state_flag == 0){
 41c:	01 30       	cpi	r16, 0x01	; 1
 41e:	21 f5       	brne	.+72     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 420:	d1 10       	cpse	r13, r1
 422:	22 c0       	rjmp	.+68     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
			prev_entry_state_flag = 1;
			
			/* Open Gate only in case there is empty slots */
			if(garage_state.garage_empty_slots > 0){
 424:	da 80       	ldd	r13, Y+2	; 0x02
 426:	dd 20       	and	r13, r13
 428:	a9 f0       	breq	.+42     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
				servo_rotate_90(ENTRY_SERVO_CHANNEL);
 42a:	82 e4       	ldi	r24, 0x42	; 66
 42c:	0e 94 89 02 	call	0x512	; 0x512 <servo_rotate_90>
				
				/* Setting timeout in case the car didn't pass second PIR after specific time. */
				timer_OVF_interrupt_Callback(timeout_entry_callback,60);
 430:	6c e3       	ldi	r22, 0x3C	; 60
 432:	80 ec       	ldi	r24, 0xC0	; 192
 434:	91 e0       	ldi	r25, 0x01	; 1
 436:	0e 94 e7 02 	call	0x5ce	; 0x5ce <timer_OVF_interrupt_Callback>
				
				/* LCD Display number of empty slots or That there is no empty slots */
				LCD_Send_Command(LCD_CLEAR_SCREEN);
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_Send_Command>
				LCD_Display_String(GARAGE_EMPTY);
 440:	88 e6       	ldi	r24, 0x68	; 104
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_Display_String>
				LCD_Display_Character(garage_state.garage_empty_slots);
 448:	8d 2d       	mov	r24, r13
 44a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_Display_Character>
		* 3- Set timeout to close the gate if the car didn't enter or pass through second PIR
		* 4- Close the Gate when the car passes through second PIR or After predetermined duration.
		* 5- Decrement Empty slots
		*/
		if(garage_state.garage_entry[ENTRY_PIR] == 1 && prev_entry_state_flag == 0){
			prev_entry_state_flag = 1;
 44e:	dd 24       	eor	r13, r13
 450:	d3 94       	inc	r13
 452:	0d c0       	rjmp	.+26     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
				/* LCD Display number of empty slots or That there is no empty slots */
				LCD_Send_Command(LCD_CLEAR_SCREEN);
				LCD_Display_String(GARAGE_EMPTY);
				LCD_Display_Character(garage_state.garage_empty_slots);
			}else{
				LCD_Send_Command(LCD_CLEAR_SCREEN);
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_Send_Command>
				LCD_Display_String(GARAGE_FULL);
 45a:	8d e7       	ldi	r24, 0x7D	; 125
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_Display_String>
		* 3- Set timeout to close the gate if the car didn't enter or pass through second PIR
		* 4- Close the Gate when the car passes through second PIR or After predetermined duration.
		* 5- Decrement Empty slots
		*/
		if(garage_state.garage_entry[ENTRY_PIR] == 1 && prev_entry_state_flag == 0){
			prev_entry_state_flag = 1;
 462:	dd 24       	eor	r13, r13
 464:	d3 94       	inc	r13
 466:	03 c0       	rjmp	.+6      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
			}else{
				LCD_Send_Command(LCD_CLEAR_SCREEN);
				LCD_Display_String(GARAGE_FULL);
			}
		}
		else if(garage_state.garage_entry[ENTRY_PIR] == 0){
 468:	01 11       	cpse	r16, r1
 46a:	01 c0       	rjmp	.+2      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
			prev_entry_state_flag = 0;
 46c:	d1 2c       	mov	r13, r1
		}
		
		/*
		* Entry Check: Close gate When car passes through second PIR 
		*/
		if(garage_state.garage_entry[ENTRY_CHECK_PIR] == 1 && prev_entry_check_state_flag == 0){
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	e8 12       	cpse	r14, r24
 472:	0f c0       	rjmp	.+30     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 474:	c1 10       	cpse	r12, r1
 476:	0d c0       	rjmp	.+26     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
			if(garage_state.garage_empty_slots > 0){
 478:	8a 81       	ldd	r24, Y+2	; 0x02
 47a:	88 23       	and	r24, r24
 47c:	11 f0       	breq	.+4      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
				garage_state.garage_empty_slots = garage_state.garage_empty_slots -1;
 47e:	81 50       	subi	r24, 0x01	; 1
 480:	8a 83       	std	Y+2, r24	; 0x02
			}
			prev_entry_check_state_flag = 1;
			if(garage_state.garage_entry[ENTRY_PIR] == 0){
 482:	01 11       	cpse	r16, r1
 484:	09 c0       	rjmp	.+18     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
				servo_rotate_0(ENTRY_SERVO_CHANNEL);
 486:	82 e4       	ldi	r24, 0x42	; 66
 488:	0e 94 76 02 	call	0x4ec	; 0x4ec <servo_rotate_0>
		*/
		if(garage_state.garage_entry[ENTRY_CHECK_PIR] == 1 && prev_entry_check_state_flag == 0){
			if(garage_state.garage_empty_slots > 0){
				garage_state.garage_empty_slots = garage_state.garage_empty_slots -1;
			}
			prev_entry_check_state_flag = 1;
 48c:	cc 24       	eor	r12, r12
 48e:	c3 94       	inc	r12
 490:	07 c0       	rjmp	.+14     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
			if(garage_state.garage_entry[ENTRY_PIR] == 0){
				servo_rotate_0(ENTRY_SERVO_CHANNEL);
			}
		}
		else if(garage_state.garage_entry[ENTRY_CHECK_PIR] == 0){
 492:	ee 20       	and	r14, r14
 494:	21 f0       	breq	.+8      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 496:	04 c0       	rjmp	.+8      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
		*/
		if(garage_state.garage_entry[ENTRY_CHECK_PIR] == 1 && prev_entry_check_state_flag == 0){
			if(garage_state.garage_empty_slots > 0){
				garage_state.garage_empty_slots = garage_state.garage_empty_slots -1;
			}
			prev_entry_check_state_flag = 1;
 498:	cc 24       	eor	r12, r12
 49a:	c3 94       	inc	r12
 49c:	01 c0       	rjmp	.+2      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
			if(garage_state.garage_entry[ENTRY_PIR] == 0){
				servo_rotate_0(ENTRY_SERVO_CHANNEL);
			}
		}
		else if(garage_state.garage_entry[ENTRY_CHECK_PIR] == 0){
			prev_entry_check_state_flag = 0;
 49e:	c1 2c       	mov	r12, r1
		* 1- Checking the Exit first PIR
		* 2- Set timeout to close the gate if the car didn't enter or pass through second PIR
		* 3- Close the Gate when the car passes through second PIR or After predetermined duration.
		* 4- Increment Empty slots
		*/
		if(garage_state.garage_exit[EXIT_PIR] == 1 && prev_exit_state_flag == 0){
 4a0:	11 30       	cpi	r17, 0x01	; 1
 4a2:	69 f4       	brne	.+26     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4a4:	a1 10       	cpse	r10, r1
 4a6:	0b c0       	rjmp	.+22     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
			prev_exit_state_flag = 1;
			servo_rotate_90(EXIT_SERVO_CHANNEL);
 4a8:	81 e4       	ldi	r24, 0x41	; 65
 4aa:	0e 94 89 02 	call	0x512	; 0x512 <servo_rotate_90>
			timer_OVF_interrupt_Callback(timeout_exit_callback,60);
 4ae:	6c e3       	ldi	r22, 0x3C	; 60
 4b0:	84 ec       	ldi	r24, 0xC4	; 196
 4b2:	91 e0       	ldi	r25, 0x01	; 1
 4b4:	0e 94 e7 02 	call	0x5ce	; 0x5ce <timer_OVF_interrupt_Callback>
		* 2- Set timeout to close the gate if the car didn't enter or pass through second PIR
		* 3- Close the Gate when the car passes through second PIR or After predetermined duration.
		* 4- Increment Empty slots
		*/
		if(garage_state.garage_exit[EXIT_PIR] == 1 && prev_exit_state_flag == 0){
			prev_exit_state_flag = 1;
 4b8:	aa 24       	eor	r10, r10
 4ba:	a3 94       	inc	r10
			servo_rotate_90(EXIT_SERVO_CHANNEL);
			timer_OVF_interrupt_Callback(timeout_exit_callback,60);
 4bc:	03 c0       	rjmp	.+6      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
		}
		else if(garage_state.garage_exit[EXIT_PIR] == 0){
 4be:	11 11       	cpse	r17, r1
 4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
			prev_exit_state_flag = 0;
 4c2:	a1 2c       	mov	r10, r1
		}
		if(garage_state.garage_exit[EXIT_CHECK_PIR] == 1 && prev_exit_check_state_flag == 0){
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	f8 12       	cpse	r15, r24
 4c8:	0d c0       	rjmp	.+26     	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4ca:	b1 10       	cpse	r11, r1
 4cc:	0b c0       	rjmp	.+22     	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
			garage_state.garage_empty_slots = garage_state.garage_empty_slots +1;
 4ce:	8a 81       	ldd	r24, Y+2	; 0x02
 4d0:	8f 5f       	subi	r24, 0xFF	; 255
 4d2:	8a 83       	std	Y+2, r24	; 0x02
			prev_exit_check_state_flag = 1;
			if(garage_state.garage_exit[EXIT_PIR] == 0){
 4d4:	11 11       	cpse	r17, r1
 4d6:	8a cf       	rjmp	.-236    	; 0x3ec <main+0x5c>
				servo_rotate_0(EXIT_SERVO_CHANNEL);
 4d8:	81 e4       	ldi	r24, 0x41	; 65
 4da:	0e 94 76 02 	call	0x4ec	; 0x4ec <servo_rotate_0>
		else if(garage_state.garage_exit[EXIT_PIR] == 0){
			prev_exit_state_flag = 0;
		}
		if(garage_state.garage_exit[EXIT_CHECK_PIR] == 1 && prev_exit_check_state_flag == 0){
			garage_state.garage_empty_slots = garage_state.garage_empty_slots +1;
			prev_exit_check_state_flag = 1;
 4de:	bb 24       	eor	r11, r11
 4e0:	b3 94       	inc	r11
 4e2:	88 cf       	rjmp	.-240    	; 0x3f4 <main+0x64>
			if(garage_state.garage_exit[EXIT_PIR] == 0){
				servo_rotate_0(EXIT_SERVO_CHANNEL);
			}
		}
		else if(garage_state.garage_exit[EXIT_CHECK_PIR] == 0){
 4e4:	ff 20       	and	r15, r15
 4e6:	09 f4       	brne	.+2      	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 4e8:	84 cf       	rjmp	.-248    	; 0x3f2 <main+0x62>
 4ea:	84 cf       	rjmp	.-248    	; 0x3f4 <main+0x64>

000004ec <servo_rotate_0>:
#include "servo_motor.h"



void servo_rotate_0(char channel){
	switch (channel){
 4ec:	81 34       	cpi	r24, 0x41	; 65
 4ee:	19 f0       	breq	.+6      	; 0x4f6 <servo_rotate_0+0xa>
 4f0:	82 34       	cpi	r24, 0x42	; 66
 4f2:	41 f0       	breq	.+16     	; 0x504 <servo_rotate_0+0x18>
 4f4:	08 95       	ret
		case 'A':
		timer1_wave_fastPWM_A(0.99999);
 4f6:	68 e5       	ldi	r22, 0x58	; 88
 4f8:	7f ef       	ldi	r23, 0xFF	; 255
 4fa:	8f e7       	ldi	r24, 0x7F	; 127
 4fc:	9f e3       	ldi	r25, 0x3F	; 63
 4fe:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <timer1_wave_fastPWM_A>
		break;
 502:	08 95       	ret
		case'B':
		timer1_wave_fastPWM_B(0.99999);
 504:	68 e5       	ldi	r22, 0x58	; 88
 506:	7f ef       	ldi	r23, 0xFF	; 255
 508:	8f e7       	ldi	r24, 0x7F	; 127
 50a:	9f e3       	ldi	r25, 0x3F	; 63
 50c:	0e 94 1a 03 	call	0x634	; 0x634 <timer1_wave_fastPWM_B>
 510:	08 95       	ret

00000512 <servo_rotate_90>:
		break;
	}
}
void servo_rotate_90(char channel){
	switch (channel){
 512:	81 34       	cpi	r24, 0x41	; 65
 514:	19 f0       	breq	.+6      	; 0x51c <servo_rotate_90+0xa>
 516:	82 34       	cpi	r24, 0x42	; 66
 518:	41 f0       	breq	.+16     	; 0x52a <servo_rotate_90+0x18>
 51a:	08 95       	ret
		case 'A':
		timer1_wave_fastPWM_A(1.499999);
 51c:	68 ef       	ldi	r22, 0xF8	; 248
 51e:	7f ef       	ldi	r23, 0xFF	; 255
 520:	8f eb       	ldi	r24, 0xBF	; 191
 522:	9f e3       	ldi	r25, 0x3F	; 63
 524:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <timer1_wave_fastPWM_A>
		break;
 528:	08 95       	ret
		case'B':
		timer1_wave_fastPWM_B(1.499999);
 52a:	68 ef       	ldi	r22, 0xF8	; 248
 52c:	7f ef       	ldi	r23, 0xFF	; 255
 52e:	8f eb       	ldi	r24, 0xBF	; 191
 530:	9f e3       	ldi	r25, 0x3F	; 63
 532:	0e 94 1a 03 	call	0x634	; 0x634 <timer1_wave_fastPWM_B>
 536:	08 95       	ret

00000538 <__vector_11>:
	OCR0=64;
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
	SET_BIT(TCCR0,CS02);
	/* toggle OC0 on compare match*/
	SET_BIT(TCCR0,COM00);
 538:	1f 92       	push	r1
 53a:	0f 92       	push	r0
 53c:	0f b6       	in	r0, 0x3f	; 63
 53e:	0f 92       	push	r0
 540:	11 24       	eor	r1, r1
 542:	2f 93       	push	r18
 544:	3f 93       	push	r19
 546:	4f 93       	push	r20
 548:	5f 93       	push	r21
 54a:	6f 93       	push	r22
 54c:	7f 93       	push	r23
 54e:	8f 93       	push	r24
 550:	9f 93       	push	r25
 552:	af 93       	push	r26
 554:	bf 93       	push	r27
 556:	ef 93       	push	r30
 558:	ff 93       	push	r31
 55a:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <counter>
 55e:	8f 5f       	subi	r24, 0xFF	; 255
 560:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <counter>
 564:	60 91 9a 00 	lds	r22, 0x009A	; 0x80009a <counter>
 568:	70 e0       	ldi	r23, 0x00	; 0
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__floatsisf>
 572:	2d ed       	ldi	r18, 0xDD	; 221
 574:	34 e2       	ldi	r19, 0x24	; 36
 576:	46 e8       	ldi	r20, 0x86	; 134
 578:	5e e3       	ldi	r21, 0x3E	; 62
 57a:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__mulsf3>
 57e:	0e 94 3b 03 	call	0x676	; 0x676 <__fixunssfsi>
 582:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <current_time>
 586:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <current_time>
 58a:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <time_in_sec>
 58e:	89 17       	cp	r24, r25
 590:	68 f4       	brcc	.+26     	; 0x5ac <__vector_11+0x74>
 592:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <__data_end>
 596:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <__data_end+0x1>
 59a:	09 95       	icall
 59c:	13 be       	out	0x33, r1	; 51
 59e:	89 b7       	in	r24, 0x39	; 57
 5a0:	8e 7f       	andi	r24, 0xFE	; 254
 5a2:	89 bf       	out	0x39, r24	; 57
 5a4:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <counter>
 5a8:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <current_time>
 5ac:	ff 91       	pop	r31
 5ae:	ef 91       	pop	r30
 5b0:	bf 91       	pop	r27
 5b2:	af 91       	pop	r26
 5b4:	9f 91       	pop	r25
 5b6:	8f 91       	pop	r24
 5b8:	7f 91       	pop	r23
 5ba:	6f 91       	pop	r22
 5bc:	5f 91       	pop	r21
 5be:	4f 91       	pop	r20
 5c0:	3f 91       	pop	r19
 5c2:	2f 91       	pop	r18
 5c4:	0f 90       	pop	r0
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	0f 90       	pop	r0
 5ca:	1f 90       	pop	r1
 5cc:	18 95       	reti

000005ce <timer_OVF_interrupt_Callback>:
 5ce:	9c 01       	movw	r18, r24
 5d0:	93 b7       	in	r25, 0x33	; 51
 5d2:	91 60       	ori	r25, 0x01	; 1
 5d4:	93 bf       	out	0x33, r25	; 51
 5d6:	93 b7       	in	r25, 0x33	; 51
 5d8:	94 60       	ori	r25, 0x04	; 4
 5da:	93 bf       	out	0x33, r25	; 51
 5dc:	78 94       	sei
 5de:	99 b7       	in	r25, 0x39	; 57
 5e0:	91 60       	ori	r25, 0x01	; 1
 5e2:	99 bf       	out	0x39, r25	; 57
 5e4:	60 93 99 00 	sts	0x0099, r22	; 0x800099 <time_in_sec>
 5e8:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <__data_end+0x1>
 5ec:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <__data_end>
 5f0:	08 95       	ret

000005f2 <timer1_wave_fastPWM_A>:
}

void timer1_wave_fastPWM_A(double value)
{
	/* set OC1A as output pin */
	SET_BIT(DDRD,5);
 5f2:	21 b3       	in	r18, 0x11	; 17
 5f4:	20 62       	ori	r18, 0x20	; 32
 5f6:	21 bb       	out	0x11, r18	; 17
	/* select fast PWM mode*/
	SET_BIT(TCCR1A,WGM11);
 5f8:	2f b5       	in	r18, 0x2f	; 47
 5fa:	22 60       	ori	r18, 0x02	; 2
 5fc:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1B,WGM12);
 5fe:	2e b5       	in	r18, 0x2e	; 46
 600:	28 60       	ori	r18, 0x08	; 8
 602:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,WGM13);
 604:	2e b5       	in	r18, 0x2e	; 46
 606:	20 61       	ori	r18, 0x10	; 16
 608:	2e bd       	out	0x2e, r18	; 46
	/* load a value in OCR1A,ICR1 */
	OCR1A=value*1000;
 60a:	20 e0       	ldi	r18, 0x00	; 0
 60c:	30 e0       	ldi	r19, 0x00	; 0
 60e:	4a e7       	ldi	r20, 0x7A	; 122
 610:	54 e4       	ldi	r21, 0x44	; 68
 612:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__mulsf3>
 616:	0e 94 3b 03 	call	0x676	; 0x676 <__fixunssfsi>
 61a:	7b bd       	out	0x2b, r23	; 43
 61c:	6a bd       	out	0x2a, r22	; 42
	ICR1=19999;
 61e:	8f e1       	ldi	r24, 0x1F	; 31
 620:	9e e4       	ldi	r25, 0x4E	; 78
 622:	97 bd       	out	0x27, r25	; 39
 624:	86 bd       	out	0x26, r24	; 38
	/* select timer clock, no prescaling */
	SET_BIT(TCCR1B,CS10);
 626:	8e b5       	in	r24, 0x2e	; 46
 628:	81 60       	ori	r24, 0x01	; 1
 62a:	8e bd       	out	0x2e, r24	; 46
	/* clear OC1A on compare match, set OC1A at BOTTOM,(non inverting mode)*/
	SET_BIT(TCCR1A,COM1A1);
 62c:	8f b5       	in	r24, 0x2f	; 47
 62e:	80 68       	ori	r24, 0x80	; 128
 630:	8f bd       	out	0x2f, r24	; 47
 632:	08 95       	ret

00000634 <timer1_wave_fastPWM_B>:
}
void timer1_wave_fastPWM_B(double value)
{
	/* set OC1B as output pin */
	SET_BIT(DDRD,4);
 634:	21 b3       	in	r18, 0x11	; 17
 636:	20 61       	ori	r18, 0x10	; 16
 638:	21 bb       	out	0x11, r18	; 17
	/* select fast PWM mode*/
	SET_BIT(TCCR1A,WGM11);
 63a:	2f b5       	in	r18, 0x2f	; 47
 63c:	22 60       	ori	r18, 0x02	; 2
 63e:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1B,WGM12);
 640:	2e b5       	in	r18, 0x2e	; 46
 642:	28 60       	ori	r18, 0x08	; 8
 644:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,WGM13);
 646:	2e b5       	in	r18, 0x2e	; 46
 648:	20 61       	ori	r18, 0x10	; 16
 64a:	2e bd       	out	0x2e, r18	; 46
	/* load a value in OCR1B,ICR1 */
	OCR1B=value*1000;
 64c:	20 e0       	ldi	r18, 0x00	; 0
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	4a e7       	ldi	r20, 0x7A	; 122
 652:	54 e4       	ldi	r21, 0x44	; 68
 654:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__mulsf3>
 658:	0e 94 3b 03 	call	0x676	; 0x676 <__fixunssfsi>
 65c:	79 bd       	out	0x29, r23	; 41
 65e:	68 bd       	out	0x28, r22	; 40
	ICR1=19999;
 660:	8f e1       	ldi	r24, 0x1F	; 31
 662:	9e e4       	ldi	r25, 0x4E	; 78
 664:	97 bd       	out	0x27, r25	; 39
 666:	86 bd       	out	0x26, r24	; 38
	/* select timer clock, no prescaling */
	SET_BIT(TCCR1B,CS10);
 668:	8e b5       	in	r24, 0x2e	; 46
 66a:	81 60       	ori	r24, 0x01	; 1
 66c:	8e bd       	out	0x2e, r24	; 46
	/* clear OC1B on compare match, set OC1B at BOTTOM,(non inverting mode)*/
	SET_BIT(TCCR1A,COM1B1);
 66e:	8f b5       	in	r24, 0x2f	; 47
 670:	80 62       	ori	r24, 0x20	; 32
 672:	8f bd       	out	0x2f, r24	; 47
 674:	08 95       	ret

00000676 <__fixunssfsi>:
 676:	0e 94 af 03 	call	0x75e	; 0x75e <__fp_splitA>
 67a:	88 f0       	brcs	.+34     	; 0x69e <__fixunssfsi+0x28>
 67c:	9f 57       	subi	r25, 0x7F	; 127
 67e:	98 f0       	brcs	.+38     	; 0x6a6 <__fixunssfsi+0x30>
 680:	b9 2f       	mov	r27, r25
 682:	99 27       	eor	r25, r25
 684:	b7 51       	subi	r27, 0x17	; 23
 686:	b0 f0       	brcs	.+44     	; 0x6b4 <__fixunssfsi+0x3e>
 688:	e1 f0       	breq	.+56     	; 0x6c2 <__fixunssfsi+0x4c>
 68a:	66 0f       	add	r22, r22
 68c:	77 1f       	adc	r23, r23
 68e:	88 1f       	adc	r24, r24
 690:	99 1f       	adc	r25, r25
 692:	1a f0       	brmi	.+6      	; 0x69a <__fixunssfsi+0x24>
 694:	ba 95       	dec	r27
 696:	c9 f7       	brne	.-14     	; 0x68a <__fixunssfsi+0x14>
 698:	14 c0       	rjmp	.+40     	; 0x6c2 <__fixunssfsi+0x4c>
 69a:	b1 30       	cpi	r27, 0x01	; 1
 69c:	91 f0       	breq	.+36     	; 0x6c2 <__fixunssfsi+0x4c>
 69e:	0e 94 c9 03 	call	0x792	; 0x792 <__fp_zero>
 6a2:	b1 e0       	ldi	r27, 0x01	; 1
 6a4:	08 95       	ret
 6a6:	0c 94 c9 03 	jmp	0x792	; 0x792 <__fp_zero>
 6aa:	67 2f       	mov	r22, r23
 6ac:	78 2f       	mov	r23, r24
 6ae:	88 27       	eor	r24, r24
 6b0:	b8 5f       	subi	r27, 0xF8	; 248
 6b2:	39 f0       	breq	.+14     	; 0x6c2 <__fixunssfsi+0x4c>
 6b4:	b9 3f       	cpi	r27, 0xF9	; 249
 6b6:	cc f3       	brlt	.-14     	; 0x6aa <__fixunssfsi+0x34>
 6b8:	86 95       	lsr	r24
 6ba:	77 95       	ror	r23
 6bc:	67 95       	ror	r22
 6be:	b3 95       	inc	r27
 6c0:	d9 f7       	brne	.-10     	; 0x6b8 <__fixunssfsi+0x42>
 6c2:	3e f4       	brtc	.+14     	; 0x6d2 <__fixunssfsi+0x5c>
 6c4:	90 95       	com	r25
 6c6:	80 95       	com	r24
 6c8:	70 95       	com	r23
 6ca:	61 95       	neg	r22
 6cc:	7f 4f       	sbci	r23, 0xFF	; 255
 6ce:	8f 4f       	sbci	r24, 0xFF	; 255
 6d0:	9f 4f       	sbci	r25, 0xFF	; 255
 6d2:	08 95       	ret

000006d4 <__floatunsisf>:
 6d4:	e8 94       	clt
 6d6:	09 c0       	rjmp	.+18     	; 0x6ea <__floatsisf+0x12>

000006d8 <__floatsisf>:
 6d8:	97 fb       	bst	r25, 7
 6da:	3e f4       	brtc	.+14     	; 0x6ea <__floatsisf+0x12>
 6dc:	90 95       	com	r25
 6de:	80 95       	com	r24
 6e0:	70 95       	com	r23
 6e2:	61 95       	neg	r22
 6e4:	7f 4f       	sbci	r23, 0xFF	; 255
 6e6:	8f 4f       	sbci	r24, 0xFF	; 255
 6e8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ea:	99 23       	and	r25, r25
 6ec:	a9 f0       	breq	.+42     	; 0x718 <__floatsisf+0x40>
 6ee:	f9 2f       	mov	r31, r25
 6f0:	96 e9       	ldi	r25, 0x96	; 150
 6f2:	bb 27       	eor	r27, r27
 6f4:	93 95       	inc	r25
 6f6:	f6 95       	lsr	r31
 6f8:	87 95       	ror	r24
 6fa:	77 95       	ror	r23
 6fc:	67 95       	ror	r22
 6fe:	b7 95       	ror	r27
 700:	f1 11       	cpse	r31, r1
 702:	f8 cf       	rjmp	.-16     	; 0x6f4 <__floatsisf+0x1c>
 704:	fa f4       	brpl	.+62     	; 0x744 <__floatsisf+0x6c>
 706:	bb 0f       	add	r27, r27
 708:	11 f4       	brne	.+4      	; 0x70e <__floatsisf+0x36>
 70a:	60 ff       	sbrs	r22, 0
 70c:	1b c0       	rjmp	.+54     	; 0x744 <__floatsisf+0x6c>
 70e:	6f 5f       	subi	r22, 0xFF	; 255
 710:	7f 4f       	sbci	r23, 0xFF	; 255
 712:	8f 4f       	sbci	r24, 0xFF	; 255
 714:	9f 4f       	sbci	r25, 0xFF	; 255
 716:	16 c0       	rjmp	.+44     	; 0x744 <__floatsisf+0x6c>
 718:	88 23       	and	r24, r24
 71a:	11 f0       	breq	.+4      	; 0x720 <__floatsisf+0x48>
 71c:	96 e9       	ldi	r25, 0x96	; 150
 71e:	11 c0       	rjmp	.+34     	; 0x742 <__floatsisf+0x6a>
 720:	77 23       	and	r23, r23
 722:	21 f0       	breq	.+8      	; 0x72c <__floatsisf+0x54>
 724:	9e e8       	ldi	r25, 0x8E	; 142
 726:	87 2f       	mov	r24, r23
 728:	76 2f       	mov	r23, r22
 72a:	05 c0       	rjmp	.+10     	; 0x736 <__floatsisf+0x5e>
 72c:	66 23       	and	r22, r22
 72e:	71 f0       	breq	.+28     	; 0x74c <__floatsisf+0x74>
 730:	96 e8       	ldi	r25, 0x86	; 134
 732:	86 2f       	mov	r24, r22
 734:	70 e0       	ldi	r23, 0x00	; 0
 736:	60 e0       	ldi	r22, 0x00	; 0
 738:	2a f0       	brmi	.+10     	; 0x744 <__floatsisf+0x6c>
 73a:	9a 95       	dec	r25
 73c:	66 0f       	add	r22, r22
 73e:	77 1f       	adc	r23, r23
 740:	88 1f       	adc	r24, r24
 742:	da f7       	brpl	.-10     	; 0x73a <__floatsisf+0x62>
 744:	88 0f       	add	r24, r24
 746:	96 95       	lsr	r25
 748:	87 95       	ror	r24
 74a:	97 f9       	bld	r25, 7
 74c:	08 95       	ret

0000074e <__fp_split3>:
 74e:	57 fd       	sbrc	r21, 7
 750:	90 58       	subi	r25, 0x80	; 128
 752:	44 0f       	add	r20, r20
 754:	55 1f       	adc	r21, r21
 756:	59 f0       	breq	.+22     	; 0x76e <__fp_splitA+0x10>
 758:	5f 3f       	cpi	r21, 0xFF	; 255
 75a:	71 f0       	breq	.+28     	; 0x778 <__fp_splitA+0x1a>
 75c:	47 95       	ror	r20

0000075e <__fp_splitA>:
 75e:	88 0f       	add	r24, r24
 760:	97 fb       	bst	r25, 7
 762:	99 1f       	adc	r25, r25
 764:	61 f0       	breq	.+24     	; 0x77e <__fp_splitA+0x20>
 766:	9f 3f       	cpi	r25, 0xFF	; 255
 768:	79 f0       	breq	.+30     	; 0x788 <__fp_splitA+0x2a>
 76a:	87 95       	ror	r24
 76c:	08 95       	ret
 76e:	12 16       	cp	r1, r18
 770:	13 06       	cpc	r1, r19
 772:	14 06       	cpc	r1, r20
 774:	55 1f       	adc	r21, r21
 776:	f2 cf       	rjmp	.-28     	; 0x75c <__fp_split3+0xe>
 778:	46 95       	lsr	r20
 77a:	f1 df       	rcall	.-30     	; 0x75e <__fp_splitA>
 77c:	08 c0       	rjmp	.+16     	; 0x78e <__fp_splitA+0x30>
 77e:	16 16       	cp	r1, r22
 780:	17 06       	cpc	r1, r23
 782:	18 06       	cpc	r1, r24
 784:	99 1f       	adc	r25, r25
 786:	f1 cf       	rjmp	.-30     	; 0x76a <__fp_splitA+0xc>
 788:	86 95       	lsr	r24
 78a:	71 05       	cpc	r23, r1
 78c:	61 05       	cpc	r22, r1
 78e:	08 94       	sec
 790:	08 95       	ret

00000792 <__fp_zero>:
 792:	e8 94       	clt

00000794 <__fp_szero>:
 794:	bb 27       	eor	r27, r27
 796:	66 27       	eor	r22, r22
 798:	77 27       	eor	r23, r23
 79a:	cb 01       	movw	r24, r22
 79c:	97 f9       	bld	r25, 7
 79e:	08 95       	ret

000007a0 <__mulsf3>:
 7a0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__mulsf3x>
 7a4:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__fp_round>
 7a8:	0e 94 46 04 	call	0x88c	; 0x88c <__fp_pscA>
 7ac:	38 f0       	brcs	.+14     	; 0x7bc <__mulsf3+0x1c>
 7ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fp_pscB>
 7b2:	20 f0       	brcs	.+8      	; 0x7bc <__mulsf3+0x1c>
 7b4:	95 23       	and	r25, r21
 7b6:	11 f0       	breq	.+4      	; 0x7bc <__mulsf3+0x1c>
 7b8:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_inf>
 7bc:	0c 94 43 04 	jmp	0x886	; 0x886 <__fp_nan>
 7c0:	11 24       	eor	r1, r1
 7c2:	0c 94 ca 03 	jmp	0x794	; 0x794 <__fp_szero>

000007c6 <__mulsf3x>:
 7c6:	0e 94 a7 03 	call	0x74e	; 0x74e <__fp_split3>
 7ca:	70 f3       	brcs	.-36     	; 0x7a8 <__mulsf3+0x8>

000007cc <__mulsf3_pse>:
 7cc:	95 9f       	mul	r25, r21
 7ce:	c1 f3       	breq	.-16     	; 0x7c0 <__mulsf3+0x20>
 7d0:	95 0f       	add	r25, r21
 7d2:	50 e0       	ldi	r21, 0x00	; 0
 7d4:	55 1f       	adc	r21, r21
 7d6:	62 9f       	mul	r22, r18
 7d8:	f0 01       	movw	r30, r0
 7da:	72 9f       	mul	r23, r18
 7dc:	bb 27       	eor	r27, r27
 7de:	f0 0d       	add	r31, r0
 7e0:	b1 1d       	adc	r27, r1
 7e2:	63 9f       	mul	r22, r19
 7e4:	aa 27       	eor	r26, r26
 7e6:	f0 0d       	add	r31, r0
 7e8:	b1 1d       	adc	r27, r1
 7ea:	aa 1f       	adc	r26, r26
 7ec:	64 9f       	mul	r22, r20
 7ee:	66 27       	eor	r22, r22
 7f0:	b0 0d       	add	r27, r0
 7f2:	a1 1d       	adc	r26, r1
 7f4:	66 1f       	adc	r22, r22
 7f6:	82 9f       	mul	r24, r18
 7f8:	22 27       	eor	r18, r18
 7fa:	b0 0d       	add	r27, r0
 7fc:	a1 1d       	adc	r26, r1
 7fe:	62 1f       	adc	r22, r18
 800:	73 9f       	mul	r23, r19
 802:	b0 0d       	add	r27, r0
 804:	a1 1d       	adc	r26, r1
 806:	62 1f       	adc	r22, r18
 808:	83 9f       	mul	r24, r19
 80a:	a0 0d       	add	r26, r0
 80c:	61 1d       	adc	r22, r1
 80e:	22 1f       	adc	r18, r18
 810:	74 9f       	mul	r23, r20
 812:	33 27       	eor	r19, r19
 814:	a0 0d       	add	r26, r0
 816:	61 1d       	adc	r22, r1
 818:	23 1f       	adc	r18, r19
 81a:	84 9f       	mul	r24, r20
 81c:	60 0d       	add	r22, r0
 81e:	21 1d       	adc	r18, r1
 820:	82 2f       	mov	r24, r18
 822:	76 2f       	mov	r23, r22
 824:	6a 2f       	mov	r22, r26
 826:	11 24       	eor	r1, r1
 828:	9f 57       	subi	r25, 0x7F	; 127
 82a:	50 40       	sbci	r21, 0x00	; 0
 82c:	9a f0       	brmi	.+38     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 82e:	f1 f0       	breq	.+60     	; 0x86c <__stack+0xd>
 830:	88 23       	and	r24, r24
 832:	4a f0       	brmi	.+18     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 834:	ee 0f       	add	r30, r30
 836:	ff 1f       	adc	r31, r31
 838:	bb 1f       	adc	r27, r27
 83a:	66 1f       	adc	r22, r22
 83c:	77 1f       	adc	r23, r23
 83e:	88 1f       	adc	r24, r24
 840:	91 50       	subi	r25, 0x01	; 1
 842:	50 40       	sbci	r21, 0x00	; 0
 844:	a9 f7       	brne	.-22     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 846:	9e 3f       	cpi	r25, 0xFE	; 254
 848:	51 05       	cpc	r21, r1
 84a:	80 f0       	brcs	.+32     	; 0x86c <__stack+0xd>
 84c:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_inf>
 850:	0c 94 ca 03 	jmp	0x794	; 0x794 <__fp_szero>
 854:	5f 3f       	cpi	r21, 0xFF	; 255
 856:	e4 f3       	brlt	.-8      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 858:	98 3e       	cpi	r25, 0xE8	; 232
 85a:	d4 f3       	brlt	.-12     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 85c:	86 95       	lsr	r24
 85e:	77 95       	ror	r23
 860:	67 95       	ror	r22
 862:	b7 95       	ror	r27
 864:	f7 95       	ror	r31
 866:	e7 95       	ror	r30
 868:	9f 5f       	subi	r25, 0xFF	; 255
 86a:	c1 f7       	brne	.-16     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 86c:	fe 2b       	or	r31, r30
 86e:	88 0f       	add	r24, r24
 870:	91 1d       	adc	r25, r1
 872:	96 95       	lsr	r25
 874:	87 95       	ror	r24
 876:	97 f9       	bld	r25, 7
 878:	08 95       	ret

0000087a <__fp_inf>:
 87a:	97 f9       	bld	r25, 7
 87c:	9f 67       	ori	r25, 0x7F	; 127
 87e:	80 e8       	ldi	r24, 0x80	; 128
 880:	70 e0       	ldi	r23, 0x00	; 0
 882:	60 e0       	ldi	r22, 0x00	; 0
 884:	08 95       	ret

00000886 <__fp_nan>:
 886:	9f ef       	ldi	r25, 0xFF	; 255
 888:	80 ec       	ldi	r24, 0xC0	; 192
 88a:	08 95       	ret

0000088c <__fp_pscA>:
 88c:	00 24       	eor	r0, r0
 88e:	0a 94       	dec	r0
 890:	16 16       	cp	r1, r22
 892:	17 06       	cpc	r1, r23
 894:	18 06       	cpc	r1, r24
 896:	09 06       	cpc	r0, r25
 898:	08 95       	ret

0000089a <__fp_pscB>:
 89a:	00 24       	eor	r0, r0
 89c:	0a 94       	dec	r0
 89e:	12 16       	cp	r1, r18
 8a0:	13 06       	cpc	r1, r19
 8a2:	14 06       	cpc	r1, r20
 8a4:	05 06       	cpc	r0, r21
 8a6:	08 95       	ret

000008a8 <__fp_round>:
 8a8:	09 2e       	mov	r0, r25
 8aa:	03 94       	inc	r0
 8ac:	00 0c       	add	r0, r0
 8ae:	11 f4       	brne	.+4      	; 0x8b4 <__fp_round+0xc>
 8b0:	88 23       	and	r24, r24
 8b2:	52 f0       	brmi	.+20     	; 0x8c8 <__fp_round+0x20>
 8b4:	bb 0f       	add	r27, r27
 8b6:	40 f4       	brcc	.+16     	; 0x8c8 <__fp_round+0x20>
 8b8:	bf 2b       	or	r27, r31
 8ba:	11 f4       	brne	.+4      	; 0x8c0 <__fp_round+0x18>
 8bc:	60 ff       	sbrs	r22, 0
 8be:	04 c0       	rjmp	.+8      	; 0x8c8 <__fp_round+0x20>
 8c0:	6f 5f       	subi	r22, 0xFF	; 255
 8c2:	7f 4f       	sbci	r23, 0xFF	; 255
 8c4:	8f 4f       	sbci	r24, 0xFF	; 255
 8c6:	9f 4f       	sbci	r25, 0xFF	; 255
 8c8:	08 95       	ret

000008ca <_exit>:
 8ca:	f8 94       	cli

000008cc <__stop_program>:
 8cc:	ff cf       	rjmp	.-2      	; 0x8cc <__stop_program>
